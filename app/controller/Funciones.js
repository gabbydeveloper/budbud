/*
 * File: app/controller/Funciones.js
 *
 * This file was generated by Sencha Architect version 4.2.9.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Bud.controller.Funciones', {
  extend: 'Ext.Base',

  singleton: true,

  showMessg: function(tipo, mensaje) {
    var titulo = '', task = null;
    switch(tipo)
    {
      case 'INFO':
        {
          Ext.toast
          (
            {
              html: mensaje,
              closable: false,
              align: 't',
              slideDUration: 200,
              maxWidth: 400
            }
          );
          break;
        }
      case 'WARNING':
        {
          task = new Ext.util.DelayedTask(function(){
            titulo = 'Alerta';
            Ext.Msg.show
            (
              {
                title: titulo,
                msg: mensaje,
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK
              }
            );
          });
          task.delay(100);
          break;
        }
      case 'ERROR':
        {
          task = new Ext.util.DelayedTask(function(){
            titulo = 'Error';
            Ext.Msg.show
            (
              {
                title: titulo,
                msg: mensaje,
                icon: Ext.Msg.ERROR,
                buttons: Ext.Msg.OK
              }
            );
          });
          task.delay(100);
          break;
        }
    }
  },

  openPanel: function(obj) {
    if(obj !== 'exit')
    {
      let object = Ext.getCmp(obj);
      let central = Ext.getCmp('cntCentral');
      if(!object)
      {
        central.removeAll();
        panel = Ext.create('Bud.view.' + obj);
        central.add(panel);
        panel.show();
      }
    }
    else
      Bud.controller.Funciones.exitApp();
  },

  loadStore: function(name, endPoint, extraParams) {

    const store = Ext.data.StoreManager.lookup(name);
    const baseUrl = CONFIG.apiUrl + endPoint;
    const user = CONFIG.user;
    const pass = CONFIG.pass;
    let params = {usuario: IDUSER};

    const base64Credentials = btoa(user+':'+pass);

    store.proxy.setConfig('url', baseUrl);
    store.proxy.setConfig('headers', {
      'Authorization': 'Basic ' + base64Credentials
    });



    if(extraParams)
    {
      for (let key in extraParams) {
        if (extraParams.hasOwnProperty(key)) {
          params[key] = extraParams[key];
        }
      }
    }

    store.proxy.extraParams = params;

    store.load();
  },

  exitApp: function() {
    const storage = Ext.util.LocalStorage.get('main');
    storage.clear();

    Ext.create('Bud.view.winLogin');
    Ext.getCmp('vpMain').destroy();
  },

  showWin: function(idWin, aliasWin) {
    var win = Ext.getCmp(idWin);
    if (win === null || typeof(win) === 'undefined')
      win = Ext.create(aliasWin);
    Ext.getCmp('cntCentral').add(win);
    win.show();
  },

  saveForm: function(idForma, data, idGridRefresca) {
    const user = CONFIG.user;
    const pass = CONFIG.pass;
    const base64Credentials = btoa(user+':'+pass);
    const forma = Ext.getCmp(idForma).getForm();
    if(forma.isValid())
      Ext.Ajax.request
      (
        {
          url: CONFIG.apiUrl + 'saveform',
          method: 'POST',
          params: {
            usuario: IDUSER,
            idForma: idForma,
            data: Ext.JSON.encode(data)
          },
          headers: {
            'Authorization': 'Basic ' + base64Credentials
          },
          callback: function(obj, success, response)
          {
            let res = Ext.JSON.decode(response.responseText);
            if(success)
            {
              Ext.getCmp(idGridRefresca).getStore().load();
            }
            else
            {
              const error = 'Ha ocurrido un error';
              Bud.controller.Funciones.showMessg('ERROR', error);
            }
          }
        }
      );
  }

});