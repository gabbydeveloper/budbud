/*
 * File: app/controller/Funciones.js
 *
 * This file was generated by Sencha Architect version 4.2.9.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Bud.controller.Funciones', {
  extend: 'Ext.Base',

  singleton: true,

  showMessg: function(tipo, mensaje) {
    let titulo = '', task = null;
    switch(tipo)
    {
      case 'INFO':
        {
          Ext.toast
          (
            {
              html: mensaje,
              closable: false,
              align: 't',
              slideDUration: 200,
              maxWidth: 400
            }
          );
          break;
        }
      case 'WARNING':
        {
          task = new Ext.util.DelayedTask(function(){
            titulo = 'Alerta';
            Ext.Msg.show
            (
              {
                title: titulo,
                msg: mensaje,
                icon: Ext.Msg.WARNING,
                buttons: Ext.Msg.OK
              }
            );
          });
          task.delay(100);
          break;
        }
      case 'ERROR':
        {
          task = new Ext.util.DelayedTask(function(){
            titulo = 'Error';
            Ext.Msg.show
            (
              {
                title: titulo,
                msg: mensaje,
                icon: Ext.Msg.ERROR,
                buttons: Ext.Msg.OK
              }
            );
          });
          task.delay(100);
          break;
        }
    }
  },

  openPanel: function(obj) {
    if(obj !== 'exit')
    {
      let object = Ext.getCmp(obj);
      let central = Ext.getCmp('cntCentral');
      if(!object)
      {
        central.removeAll();
        panel = Ext.create('Bud.view.' + obj);
        central.add(panel);
        panel.show();
      }
    }
    else
      this.exitApp();
  },

  loadStore: function(name, endPoint, extraParams, idGrid) {
    const store = Ext.data.StoreManager.lookup(name);
    const me = this;
    const cnx = me.getConnectData(endPoint);
    let params = {usuario: IDUSER};

    store.proxy.setConfig('url', cnx[0]);
    store.proxy.setConfig('headers', {
      'Authorization': 'Basic ' + cnx[1]
    });

    if(extraParams)
    {
      for (let key in extraParams) {
        if (extraParams.hasOwnProperty(key)) {
          params[key] = extraParams[key];
        }
      }
    }

    store.proxy.extraParams = params;

    store.load({
      callback: function(records, operation, success){
        if(success){
          const grid = Ext.getCmp(idGrid);
          if(typeof(grid) !== 'undefined'){
            const etiqueta = grid.down('toolbar[dock="bottom"]').down('#showItemNumbers');
            etiqueta.setValue(records.length + ' ítems');
          }
        }
        else{
          me.showMessg('ERROR', 'Ha ocurrido un error');
        }
      }
    });
  },

  exitApp: function() {
    const storage = Ext.util.LocalStorage.get('main');
    storage.clear();

    Ext.create('Bud.view.winLogin');
    Ext.getCmp('vpMain').destroy();
  },

  showWin: function(idWin, aliasWin, params) {
    var win = Ext.getCmp(idWin);
    if (win === null || typeof(win) === 'undefined')
      win = Ext.create(aliasWin);

    //Poner parámetros en la ventana para casos especiales
    if(params !== '' && params !== null && typeof(params) !== 'undefined')
    {
      Object.getOwnPropertyNames(params).forEach(function(val, idx, array){
        win[val] = params[val];
      });
    }

    Ext.getCmp('cntCentral').add(win);
    win.show();
  },

  saveForm: function(idWin, idForma, data, idGrid, closeWin) {
    const user = CONFIG.user;
    const pass = CONFIG.pass;
    const forma = Ext.getCmp(idForma).getForm();
    const me = this;
    const cnx = me.getConnectData('saveform');
    if(forma.isValid())
      Ext.Ajax.request({
        url: cnx[0],
        method: 'POST',
        params: {
          usuario: IDUSER,
          idForma: idForma,
          data: Ext.JSON.encode(data)
        },
        headers: {
          'Authorization': 'Basic ' + cnx[1]
        },
        callback: function(obj, success, response){
          let res = Ext.JSON.decode(response.responseText);
          if(success){
            Ext.getCmp(idGrid).getStore().load();
            if(closeWin)
              Ext.getCmp(idWin).close();
          }
          else{
            const error = 'Ha ocurrido un error';
            me.showMessg('ERROR', error);
          }
        }
      });
  },

  deleteRow: function(idGrid, colId) {
    const grid = Ext.getCmp(idGrid);
    const selection = grid.getSelectionModel().getSelection();
    const me = this;
    const cnx = me.getConnectData('deleterow');

    if (selection.length > 0){
      Ext.Msg.show({
        title: 'Pregunta',
        msg: '¿Realmente desea borrar el/los registro(s) seleccionado(s)',
        icon: Ext.Msg.QUESTION,
        buttonText: {
          yes: 'Si',
          no: 'No'
        },
        buttons: Ext.Msg.YESNO,
        fn: function(btn){
          if(btn === 'yes'){
            let ids = [], k = 0;
            for (k = 0; k < selection.length; k++){
              ids[k] = selection[k].get(colId);
            }
            grid.mask();
            Ext.Ajax.request({
              url: cnx[0],
              method: 'POST',
              params: {
                usuario: IDUSER,
                idGrid: idGrid,
                data: Ext.JSON.encode(ids)
              },
              headers: {
                'Authorization': 'Basic ' + cnx[1]
              },
              callback: function(obj, success, response){
                let res = Ext.JSON.decode(response.responseText);
                if(success){
                  grid.getStore().load();
                  me.showMessg('INFO', 'Se borraron ' + res.total + ' registros');
                }
                else{
                  const error = 'Ha ocurrido un error';
                  me.showMessg('ERROR', error);
                }
                grid.unmask();
              }
            });

          }
        }
      });
    }
    else{
      this.showMessg('INFO', 'Seleccione al menos un registro');
    }
  },

  getConnectData: function(endPoint) {
    const url = CONFIG.apiUrl + endPoint;
    const user = CONFIG.user;
    const pass = CONFIG.pass;
    const base64Credentials = btoa(user+':'+pass);

    return [url, base64Credentials];
  }

});